@startuml
actor user
entity "BatchJobsManager"
entity BatchJobHandlerPlugin
entity BatchEventListener
entity BatchEventManager
database batchJobsDB
participant "Azure Batch Account"
participant "Azure Batch Storage"
participant "Azure Event Hub"


user -> BatchJobsManager : request batch task creation with batch account name and job name
BatchJobsManager -> BatchJobsManager : get correct plugin for the task
BatchJobsManager <-- BatchJobsManager : return instance of BatchJobHandlerPlugin
BatchJobHandlerPlugin -> batchJobsDB : insert a batchJobRun document with state 'active'
BatchJobHandlerPlugin <-- batchJobsDB : return new batchJobRun document
BatchJobHandlerPlugin -> "Azure Batch Account" : create client connection
BatchJobHandlerPlugin <-- "Azure Batch Account" : ack connection
BatchJobHandlerPlugin -> "Azure Batch Account" : create task with id same as batchJobRun document id
BatchJobHandlerPlugin -> "Azure Batch Storage" : store the input file resources (using batchJobRun document id) needed for task execution
BatchJobHandlerPlugin -> "Azure Batch Account" : define output files to capture at the end of task completion
BatchJobHandlerPlugin <-- "Azure Batch Account" : data representing task with 'active' state
BatchJobHandlerPlugin -> batchJobsDB : update batchJobRun document and append task data object to it
BatchJobHandlerPlugin <-- batchJobsDB : ack update
BatchJobHandlerPlugin -> user : notify task was created

"Azure Batch Account" -> "Azure Batch Account" : execute task when VM is available
"Azure Batch Account" -> "Azure Batch Storage" : copy input files to the VM's workspace
"Azure Batch Account" -> "Azure Batch Storage" : copy application needed to the VM's workspace

== ON TASK START ==
"Azure Batch Account" -> "Azure Event Hub" : notify task state change to 'running'
"Azure Event Hub" -> BatchEventListener : trigger event 'onTaskStateChange'
BatchEventListener -> BatchEventManager : request to acquire lock on event
BatchEventManager -> batchJobsDB : create lock with creating record in batchJobsRunLocks collection
note right: A lock is needed so that multiple nodes serving the application do not serve the same event more than once
BatchEventManager <-- batchJobsDB : lock acquired
BatchEventManager -> BatchJobHandlerPlugin : dispatch event 'onTaskStart'
BatchJobHandlerPlugin -> "Azure Batch Account" : retrieve latest task state
BatchJobHandlerPlugin <-- "Azure Batch Account" : data representing task with state
BatchJobHandlerPlugin -> batchJobsDB : update batchJobRun document and append task data object to it
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : execute event related hook
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : on successful event execution
BatchJobHandlerPlugin -> batchJobsDB : update state as running
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : on event execution failure
BatchJobHandlerPlugin -> batchJobsDB : update state as 'failed'
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : stop task

== ON TASK COMPLETE ==
"Azure Batch Account" -> "Azure Event Hub" : notify task state change to 'completed'
"Azure Event Hub" -> BatchEventListener : trigger event 'onTaskStateChange'
BatchEventListener -> BatchEventManager : request to acquire lock on event
BatchEventManager -> batchJobsDB : create lock with creating record in batchJobsRunLocks collection
BatchEventManager <-- batchJobsDB : lock acquired
BatchEventManager -> BatchJobHandlerPlugin : dispatch event 'onTaskCompleteEvent'
BatchJobHandlerPlugin -> "Azure Batch Account" : retrieve latest task state
BatchJobHandlerPlugin <-- "Azure Batch Account" : data representing task with state
BatchJobHandlerPlugin -> batchJobsDB : update batchJobRun document and append task data object to it
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : check if task had actually failed
note right: A task that fails also registers as complete, but the actual failure information is either in executionInfo or could also be in the file generated by running application
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : execute event related hook
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : on successful event execution
BatchJobHandlerPlugin -> batchJobsDB : update state as running
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : on event execution failure
BatchJobHandlerPlugin -> batchJobsDB : update state as 'failed'
BatchJobHandlerPlugin -> BatchJobHandlerPlugin : stop task

@enduml